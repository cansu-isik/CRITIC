# -*- coding: utf-8 -*-
"""CRITIC

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BEv3dp_Q002RZT2Gxw60LlZJ339whaVe

CRITIC IMPLEMENTATION
"""

import pandas as pd
import numpy as np

mobile_full=pd.read_excel('edas_data_python.xlsx')
mobile_full.head()

"""REFERENCE TABLE"""

criteria=['P/E RATIO','M/B RATIO','EPS','DIV. YIELD','DIV. PAYOUT']
types=['cost','cost','benefit','benefit','cost']
mobile_full_v2=mobile_full.iloc[:,1:6]
mobile_full_v2.head()
mobile_full_np=np.array(mobile_full_v2)
print(mobile_full_np)

len(types)

"""STEP 1 ) R- & R+"""

pos_r=[]
neg_r=[]
for k in range(len(types)):
  if types[k]=='benefit':
    m=np.max(mobile_full_np,axis=0)
    n=np.min(mobile_full_np,axis=0)
  else :
    m=np.min(mobile_full_np,axis=0)
    n=np.max(mobile_full_np,axis=0)
pos_r.append(m)
neg_r.append(n)
print('r+ : ', pos_r)
print('r- : ', neg_r)

neg_r[0][0]

"""STEP 2) NORMALIZATION"""

normal_table=np.zeros(shape=(mobile_full_np.shape[0],mobile_full_np.shape[1]))
for k in range(mobile_full_np.shape[1]):
  for l in range(mobile_full_np.shape[0]):
    m=(mobile_full_np[l][k]-neg_r[0][k])/(pos_r[0][k]-neg_r[0][k])
    normal_table[l][k]=+m
print(normal_table)

normal_table.shape

X = normal_table[:, [1]]
X

"""STEP 3) Correlation Matrix"""

#x=normal_table[:, [0]]
#y=normal_table[:, [1]]
corr_mat=pd.DataFrame(normal_table)
corr_mat_son=corr_mat.corr()
corr_mat_son

"""STEP 4) Standard Deviation"""

std_mat=corr_mat.std()
print(std_mat)

"""STEP 5) Index Criteria"""

index_criteria_list=[]
for i in range(len(std_mat)):
  x_list=[]
  for j in range(corr_mat_son.shape[0]):
    y=+corr_mat_son.iloc[0,j]
    x=1-y
    x_list.append(x)
  z=sum(x_list)*std_mat[i]
  index_criteria_list.append(z)

"""STEP 6) WEIGHTS"""

weight_list=[]
for i in range(len(index_criteria_list)):
  y=index_criteria_list[i]/sum(index_criteria_list)
  weight_list.append(y)

weight_list